import java.awt.print.PrinterGraphics;

public class DlinkedList {
	
	class Node{
		int data;
		Node next;
		Node prev;
		
		Node(int data){
			this.data = data;
			
		}
	}

	public Node head = null;
	public Node  tail = null;
	
	// adding the node
	public void addNode(int data) {
		
		Node newNode = new Node(data);
		
		if(head == null) {
			head = newNode;
		}else {
			tail.next = newNode;
			newNode.prev = tail;
		}
		tail = newNode;
		
	}
	
	// method to delete a node;
	
	public void delete(int data) {
		
		Node temp = head , temp1 = null, temp2 = null;
		if(temp.data == data ) {
			head  = temp.next;
			return;
			}
		while(temp != null && temp.data != data) {
			
			temp1 = temp;
			temp = temp.next;
			temp2 = temp.next;

			
		}
		if(temp == null) {
			return;
		}if(temp== tail) {
			tail = temp2;
			tail.next = null;
			return;
		}
		temp2.prev = temp.prev;
		temp1.next = temp.next;
		
	}
	
	// inserting a data after a element is the Node;
	 public void insertAfter(int nextTo , int data) {
		 
		 Node newNode = new Node(data);
		 Node temp = head;
		 
		 //if the nextTo is head;
		 if(temp.data == nextTo ) {
			 newNode.next = temp.next;
			 newNode.prev = temp;
			 temp.next.prev = newNode;
			 temp.next = newNode;
			 return;
		 }
		 //for finding the nextTo we use traverse;
		 
		 while(temp != null && temp.data != nextTo) {
			 temp = temp.next;
		 }
		 
		 //case : if the element is not found;
		 if(temp == null) {
			 System.out.println("the nextTo element not found");
			 return;
		 }
		 
		 //the nextTo is find at the tail;
		 if(temp == tail) {
			 tail.next = newNode;
			 newNode.prev = tail;
			 tail = newNode;
			 tail.next = null;
			 return;
		 }
		 newNode.next = temp.next;
		 newNode.prev = temp;
		 temp.next.prev = newNode;
		 temp.next = newNode;
		 return;
	 }
	 
	 //insertBefore;
	 
	 public void insertBefore(int target, int data) {
		 
		 Node newNode = new Node(data);
		 Node temp = head;
		 
		 //case if the target is head;
		 
		 if(temp.data  == target) {
			 head = newNode;
			 newNode.prev= null;
			 newNode.next = temp;
			 temp.prev = newNode;
			 return;
		 }
		 // traverse;
		 while(temp != null && temp.data != target) {
			 temp= temp.next;
		 }
		 // if null
		 if(temp== null) {
			 System.out.println("the target is not found");
			 return;
			 
		 }
		 // the case: we found the target at somewhere;
		 
		 newNode.prev = temp.prev;
		 newNode.next = temp;
		 temp.prev.next = newNode;
		 temp.prev = newNode;
		 
	 }
	
	
	// display node;
	public void display() {
		
		Node temp = head;
		
		if(head == null) {
			System.out.println(" List is empty");
			return;
		}
		
		while(temp != null) {
		System.out.println(temp.data);
		temp= temp.next;
		
		
		}
	}
	
	//display reverse
public void displayReverse() {
		
		Node temp = tail;
		
		if(tail == null) {
			System.out.println(" List is empty");
			return;
		}
		
		while(temp != null) {
		System.out.println(temp.data);
		temp= temp.prev;
		
		
		}
	}


	
	// main method
	
	public static void main(String [] args) {
		
		DlinkedList list = new DlinkedList();
		
		list.addNode(10);
		list.addNode(20);
		list.addNode(50);
		list.addNode(46);
		list.addNode(32);
		list.addNode(45);
		
//		list.display();
		
//		list.displayReverse();
		
		list.delete(46);
//		list.displayReverse();
//		list.display();
		
		list.insertBefore(10, 11);
		list.insertBefore(45, 46);
		list.insertBefore(50, 51);
		
		list.display();
//		list.displayReverse();
		
		
		
		
	}
	
	
	
	
	
}
